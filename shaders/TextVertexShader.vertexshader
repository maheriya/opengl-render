#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec2 vertexPosition_opencv;
layout(location = 1) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

void main(){
	// Output position of the vertex, in clip space
	// map [0..1280][0..720] to [-1..1][-1..1]
	vec2 vertexPosition_opengl = vertexPosition_opencv - vec2(640,360); // [0..1280][0..720] -> [-640..640][-360..360]
    vertexPosition_opengl /= vec2(640,360);

	gl_Position =  vec4(vertexPosition_opengl,0,1);
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}
